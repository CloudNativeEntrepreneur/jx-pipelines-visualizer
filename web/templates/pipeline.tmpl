{{ define "css-pipeline" }}
    <link rel="stylesheet" href="https://unpkg.com/@clr/icons/clr-icons.min.css">
{{ end }}

{{ define "js-pipeline" }}
    <script src="https://unpkg.com/@webcomponents/custom-elements" defer></script>
    <script src="https://unpkg.com/@clr/icons/clr-icons.min.js"></script>
    <script src="/static/ansi_up.js" type="text/javascript"></script>
    <script type="text/javascript">
        window.onload = () => {
            const ansi_up = new AnsiUp;
            const logs = document.getElementById("logs");
            const errors = document.getElementById("errors");
            {{ if .Pipeline.Spec.BuildLogsURL }}
                const req = new XMLHttpRequest();
                req.addEventListener("load", function(e) {
                    logs.innerHTML = ansi_up.ansi_to_html(req.responseText);
                });
                req.addEventListener("error", function(e) {
                    errors.innerHTML = ansi_up.ansi_to_html(req.statusText);
                });
                req.open("GET", "/{{.Pipeline.Spec.GitOwner}}/{{.Pipeline.Spec.GitRepository}}/{{.Pipeline.Spec.GitBranch}}/{{.Pipeline.Spec.Build}}/logs");
                req.send();
            {{ else }}
                const eventSource = new EventSource("/{{.Pipeline.Spec.GitOwner}}/{{.Pipeline.Spec.GitRepository}}/{{.Pipeline.Spec.GitBranch}}/{{.Pipeline.Spec.Build}}/logs/live");
                let logsBuffer = "";
                
                eventSource.addEventListener("log", function(e) {
                    logsBuffer += e.data + "\n";
                }, {passive: true})
                eventSource.addEventListener("error", function(e) {
                    errors.innerHTML = e.data;
                })
                eventSource.addEventListener("EOF", function(e) {
                    eventSource.close();
                })

                function repeatOften() {
                    if(logsBuffer) {
                        logs.insertAdjacentHTML('beforeend', ansi_up.ansi_to_html(logsBuffer));
                        logsBuffer = "";
                    }
                    requestAnimationFrame(repeatOften);
                }
                // Waiting the next animation frame to add DOM element
                requestAnimationFrame(repeatOften);         
            {{ end }}
        };
    </script>
{{ end }}

{{ define "header-pipeline" }}
<h1 class="header-title">
  <a href="/">Pipelines</a> &gt;
  <a href="/{{ .Pipeline.Spec.GitOwner }}">{{ .Pipeline.Spec.GitOwner }}</a> &gt;
  <a href="/{{ .Pipeline.Spec.GitOwner }}/{{ .Pipeline.Spec.GitRepository }}">{{ .Pipeline.Spec.GitRepository }}</a> &gt;
  <a href="/{{ .Pipeline.Spec.GitOwner }}/{{ .Pipeline.Spec.GitRepository }}/{{ .Pipeline.Spec.GitBranch }}">{{ .Pipeline.Spec.GitBranch }}</a>
  {{ .Pipeline.Spec.Context }} #{{ .Pipeline.Spec.Build }}
  <span class="status-{{ .Pipeline.Spec.Status }}">{{ .Pipeline.Spec.Status }}</span>
</h1>
<div class="pipeline-metadata">
    <span>
        <a href="{{ .Pipeline.Spec.AuthorURL }}">
            <img src='{{ if not .Pipeline.Spec.AuthorAvatarURL }}{{ "/static/avatar.png" }}{{ else }}{{ .Pipeline.Spec.AuthorAvatarURL }}{{ end }}' title="{{ .Pipeline.Spec.AuthorURL }}" class="owner-img" />
        </a>
    </span>
    <span>
        {{- if .Pipeline.Spec.PullTitle -}}
            <a href="{{ pipelinePullRequestURL .Pipeline }}">{{ .Pipeline.Spec.PullTitle }}</a>
        {{- else -}}
            <a href="{{ .Pipeline.Spec.ReleaseNotesURL }}">Release {{ base .Pipeline.Spec.ReleaseNotesURL }}</a>
        {{- end -}}
    </span>
</div>
{{ end }}

<section class="in-building">
    <ul class="clr-timeline timeline">
        {{ range $pipeStep := .Pipeline.Spec.Steps }}
            {{ if $pipeStep.Stage }}
            <li class="clr-timeline-step">
                {{- if $pipeStep.Stage.CompletedTimestamp }}
                    <div class="clr-timeline-step-header">{{ $pipeStep.Stage.CompletedTimestamp.Format "15:04:05" }}</div>
                {{ else if $pipeStep.Stage.StartedTimestamp }}
                    <div class="clr-timeline-step-header">{{ $pipeStep.Stage.StartedTimestamp.Format "15:04:05" }}</div>
                {{ else }}
                    <div class="clr-timeline-step-header">{{ $pipeStep.Stage.Status }}</div>
                {{ end }}
                {{- if (eq $pipeStep.Stage.Status "Succeeded")}}
                    <clr-icon shape="success-standard" aria-label="Completed"></clr-icon>
                {{- else if (eq $pipeStep.Stage.Status "Running")}}
                    <clr-icon shape="dot-circle" aria-current="true" aria-label="Current"></clr-icon>
                {{- else if (eq $pipeStep.Stage.Status "Failed")}}
                    <clr-icon shape="error-standard" aria-label="Error"></clr-icon>
                {{- else }}
                    <clr-icon shape="circle" aria-label="Not started"></clr-icon>
                {{end}}
                <div class="clr-timeline-step-body">
                    <span class="clr-timeline-step-title">{{ $pipeStep.Stage.Name }}</span>
                </div>
            </li>
            {{ end }}
        {{ end }}
    </ul>
</section>
<section class="pipelines">
    <pre id="errors"></pre>
    <pre id="logs"></pre>
</section>